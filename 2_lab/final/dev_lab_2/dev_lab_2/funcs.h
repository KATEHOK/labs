#pragma once


/*
* Запрашивает и устанавливает число.
* Параметры:
* (int*) pNum - указатель, куда установить число.
* Вернет:
* 0 - успешно;
* 1 - неуспешно;
*/
int getNum(int*);

/*
* Запрашивает и устанавливает натуральное число.
* Параметры:
* (int*) pNum - указатель, куда установить число.
* Вернет:
* 0 - успешно;
* 1 - неуспешно;
*/
int getNat(int*);

/*
* Запрашивает и устанавливает целое число.
* Параметры:
* (int*) pNum - указатель, куда установить число.
* Вернет:
* 0 - успешно;
* 1 - неуспешно;
*/
int getInt(int*);

/*
* Инициализирует четыре стека.
* Параметры:
* (Stack*) pMain - указатель на главный стек;
* (Stack*) pSupport - указатель на стек временного размещения;
* (Stack*) pBracket - указатель на стек скобок;
* (Stack*) pFragment - указатель на стек фрагментов;
* (int*) pLen - указатель на длину вектора (если используется стек-вектор).
* Вернет:
* 0 - успешно;
* 1 - неуспешно.
*/
int stacksInit(Stack*, Stack*, Stack*, Stack*, int*);

/*
* Освобождает память, выделенную под четыре стека.
* Параметры:
* (Stack*) pMain - указатель на главный стек;
* (Stack*) pSupport - указатель на стек временного размещения;
* (Stack*) pBracket - указатель на стек скобок;
* (Stack*) pFragment - указатель на стек фрагментов.
*/
void stacksFree(Stack*, Stack*, Stack*, Stack*);

/*
* Запрашивает и устанавливает формулу, определяет длину стека-вектора.
* Параметры:
* (char**) ppFormula - указатель на массив (на строку);
* (int*) pLen - указатель на длину массива.
* Вернет:
* 0 - успешно;
* 1 - неуспешно.
*/
int setFormula(char**, int*);

/*
* Обрабатывает открытую скобку.
* Параметры:
* (Stack*) pMain - указатель на основной стек;
* (Stack*) pBracket - указатель на стек скобок;
* (Stack*) pFragment - указатель на стек фрагментов;
* (char*) pData - указатель на обрабатываемый символ;
* (int) previous - код предыдущей операции (0, 1, 2, 3, 4).
* Вернет:
* 0 - успешно;
* 1 - неуспешно.
*/
int processOpenBracket(Stack*, Stack*, Stack*, char*, int);

/*
* Обрабатывает закрытую скобку.
* Параметры:
* (Stack*) pBracket - указатель на стек скобок
* (Stack*) pFragment - указатель на стек фрагментов.
* Вернет:
* 0 - успешно;
* 1 - неуспешно.
*/
int processCloseBracket(Stack*, Stack*);

/*
* Обрабатывает операции сложения и вычитания.
* (Stack*) pMain - указатель на основной стек;
* (Stack*) pSupport - указатель на стек временного размещения;
* (Stack*) pBracket - указатель на стек скобок;
* (char*) pData - указатель на обрабатываемый символ.
* Вернет:
* 0 - успешно;
* 1 - неуспешно.
*/
int processPlusMinus(Stack*, Stack*, Stack*, char*);

/*
* Обрабатывает операции умножения и деления.
* (Stack*) pMain - указатель на основной стек;
* (Stack*) pSupport - указатель на стек временного размещения;
* (Stack*) pFragment - указатель на стек фрагментов;
* (char*) pData - указатель на обрабатываемый символ.
* Вернет:
* 0 - успешно;
* 1 - неуспешно.
*/
int processMulDiv(Stack*, Stack*, Stack*, char*);

/*
* Обрабатывает переменную.
* Параметры:
* (Stack*) pMain - указатель на основной стек;
* (Stack*) pFragment - указатель на стек фрагментов;
* (char*) pData - указатель на обрабатываемый символ;
* (int) previous - код предыдущей операции (0, 1, 2, 3, 4).
* Вернет:
* 0 - успешно;
* 1 - неуспешно.
*/
int processParam(Stack*, Stack*, char*, int);

/*
* Печатает скомпилированную формулу.
* (Stack*) pMain - указатель на основной стек;
* (Stack*) pSupport - указатель на стек временного размещения;
* (int) len - длина формулы (массива).
* Вернет:
* 0 - успешно;
* 1 - неуспешно.
*/
int printCompiled(Stack*, Stack*, int);