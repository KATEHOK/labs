#pragma once
#define STACK_H


typedef struct {
	Release* pRelease;
} Stack;

/*
* Инициализирует стек.
* Параметры:
* (Stack*) pStack - указатель  на стек;
* (int) len - длина вектора (если используется стек-вектор).
* Вернет:
* 0 - успешно;
* 1 - неуспешно.
*/
int stackInit(Stack*, int);

/*
* Добавляет в стек одно значение.
* Параметры:
* (Stack*) pStack - указатель на стек;
* (char*) pData - указатель на символ.
* Вернет:
* 0 - упешно;
* 1 - неуспешно (переполнение стека-вектора);
* 2 - неуспешно (ошибка памяти стека-списка).
*/
int stackPush(Stack*, char*);

/*
* Копирует из стека одно значение.
* Параметры:
* (Stack*) pStack - указатель на стек;
* (char**) ppData - указатель на указатель на символ.
* Вернет:
* 0 - упешно;
* 1 - неуспешно (стек пуст).
*/
int stackCopy(Stack*, char**);

/*
* Копирует и удаляет из стека одно значение.
* Параметры:
* (Stack*) pStack - указатель на стек;
* (char**) ppData - указатель на указатель на символ.
* Вернет:
* 0 - упешно;
* 1 - неуспешно (стек пуст).
*/
int stackPop(Stack*, char**);

/*
* Освобождает память, выделенную под стек.
* Параметры:
* (Stack*) pStack - указатель на стек.
*/
void stackFree(Stack*);