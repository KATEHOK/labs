#pragma once

/*
* Выводит список действий и запрашивает действие
* Параметры:
* (char*) pQuestion - вопрос к пользователю;
* (char**) ppArray - массив вариантов действий;
* (int) len - длина массива.
* Вернет:
* -1 - конец файла;
* 0 - выход;
* >0 - действие.
*/
int console(char*, char**, int);

/*
* Запрашивает ввод ключа и данных, добавляет новый элемент в таблицу
* Параметры:
* (Container*) pContainer - указатель на описатель таблицы.
* Вернет:
* 0 - успешно;
* 1 - ошибка ввода (конец файла);
* 2 - передана ошибочная структура;
* 3 - не успешно (дублирование ключей);
* 4 - не успешно (переполнение);
* 5 - не удалось открыть файл;
* 6 - предыдущее + не удалось удалить из описателя таблицы (передана ошибочная структура).
*/
int dInsertItem(Container*);

/*
* Запрашивает удаление ключа из описателя и из файла
* Параметры:
* (Container*) pContainer - указатель на контейнер описателя таблицы;
* (int) key - значение ключа.
* Вернет:
* 0 - ключ успешно удален;
* 1 - ошибка ввода (конец файла);
* 2 - передана ошибочная структура;
* 3 - ключ не найден;
* 4 - не удалось открыть файл, при этом из описателя ключ был удален (имеет место несоответствие)
*/
int dDeleteItem(Container*);

/*
* Запрашивает ключ и вызывает печать элемента
* Параметры:
* (Container*) pContainer - указатель на описатель таблицы.
* Вернет:
* 0 - инфа распечатана или распечатано сообщение об отсутствии ключа;
* 1 - ошибка ввода (конец файла);
* 2 - передана ошибочная структура;
* 3 - ошибка открытия файла.
*/
int dPrintItem(Container*);

/*
* Запрашивает подтверждение и вызывает удаление таблицы отовсюду
* Параметры:
* (Container*) pContainer - указатель на описатель таблицы.
* Вернет:
* 0 - удаление прошло успешно;
* 1 - ошибка ввода (конец файла);
* 2 - пользователь передумал удалять таблицу;
* 3 - передана ошибочная структура.
*/
int dDelete(Container*);

/*
* Выгружает таблицу в файл и удаляет описатель таблицы
* Параметры:
* (Container*) pContainer - указатель на описатель таблицы.
* Вернет:
* 0 - успешно;
* 1 - ошибка ввода (конец файла);
* 2 - таблица не удалена (если была ошибка, то печатает ее);
* 3 - ошибка не совместимая с продолжением работы.
*/
int dClose(Container*);

/*
* Вызывает ввод строки-имени нового файла
* Параметры:
* (char**) ppName - указатель на массив символов-строку, куда записать ввод.
* Вернет:
* 0 - успешно;
* 1 - ошибка ввода (конец файла).
*/
int dGetName(char**);

/*
* Запрвшивает интервал ключей и создает из них таблицу
* Параметры:
* (Container*) pContainer - указатель на контейнер описателя исходной таблицы;
* (Container**) ppNew - указатель на указатель на место, куда записать новую таблицу.
* Вернет:
* 0 - успешно, либо ошибка создания новой таблицы (не критично);
* 1 - ошибка ввода (конец файла);
* 2 - критическая ошибка, необходимо экстренное завершение работы.
*/
int dCopyRange(Container*, Container**);

/*
* Запрашивает имя файла и вызывает его открытие
* Параметры:
* (Container**) ppContainer - указатель на указатель на место, куда записать описатель.
* Вернет:
* 0 - файл успешно открыт;
* 1 - ошибка ввода (конец файла);
* 2 - Файл не был открыт (печатает причину).
*/
int dOpen(Container**);

/*
* Запрашивает данные по новой таблице и создает ее
* Параметры:
* (Container**) ppContainer - указатель на указатель, куда записать описатель таблицы.
* Вернет:
* 0 - все прошло успешно;
* 1 - ошибка ввода (конец файла);
* 2 - критическая ошибка, необходимо экстренное завершение работы;
* 3 - ошибка создания таблицы (печатает текст об ошибке).
*/
int dMakeNew(Container**);

/*
* Обрабатывает возможные действия с таблицей
* Параметры:
* (Container*) pContainer - указатель на описатель таблицы;
* (Container**) ppNew - указатель на указатель на место, куда записать таблицу-инткрвал.
* Вернет:
* 0 - таблица корректно закрыта;
* 1 - критическая ошибка, необходимо экстренно завершить выполнение программы.
*/
int dProcessTable(Container*);