#pragma once

/*
* Создает форматированный файл пустой таблицы
* Параметры:
* (char*) pFilename - имя файла без расширения (массив символов);
* (int) maxKeysCount - максимальный размерр таблицы.
* Вернет:
* 0 - файл успешно создан;
* 1 - файл не был создан.
*/
int createFormatFile(char*, int);

/*
* Выгружает из оперативки в файл описатель и информацию таблицы
* Параметры:
* (Container*) pContainer - указатель на контейнер описателя;
* (int*) pInfo - указатель на массив информации.
* Вернет:
* 0 - выгрузка прошла успешно;
* 1 - передана неправильная структура;
* 2 - не удплось открыть файл.
*/
int upload(Container*, int*);

/*
* Загружает описание таблицы и пространства ключей из файла
* (char*) pName - имя таблице (оно же и название файла, длина до 15 символов);
* (Table**) ppTable - указатель на указатель, куда записать таблицу;
* (int**) ppKey - указатель на указатель, куда записать массив ключей.
* Вернет:
* 0 - таблица загружена успешно;
* 1 - не удалось открыть файл с таким именем;
* 2 - отказ в выделении памяти;
* 3 - файл пуст.
*/
int download(char*, Table**, int**);

/*
* Вставляет в файл в нужную позицию новый элемент (вызывать после успешной вставки ключа в описатель)
* Параметры:
* (Table*) pTable - указатель на описатель таблицы;
* (int) key - значение ключа;
* (int) id - индекс вставленного в оперативке ключа;
* (int) info - инва для нового элемента.
* Вернет:
* 0 - вставка прошла успешно;
* 1 - не удалось открыть файл
* (необходимо либо повторить вызов функции, либо удалить ключ из описателя).
*/
int fInsertItem(Table*, int, int, int);

/*
* Удаляет из файла элемент, сохраняя упорядоченность
* (вызывать после успешного удаления ключа из описателя, запомнить удаленный ключ и его индекс)
* Параметры:
* (Table*) pTable - указатель на описатель таблицы;
* (int) id - индекс удаленного из описателя ключа.
* Вернет:
* 0 - удаление прошла успешно;
* 1 - не удалось открыть файл
* (необходимо либо повторить вызов функции, либо вставить ключ обратно в описатель).
*/
int fDeleteItem(Table*, int);

/*
* Копирует диапазон элементов из одного файла в создаваемый
* (вызывать после успешного выполнения аналогичной функции из table.c)
* Параметры:
* (Table*) pTableSource - указатель на исходную таблицу;
* (Table*) pTableDestination - указатель на целеыую таблицу;
* (int) idFrom - иденимфмкатор начала копирования.
* Вернет:
* 0 - копирование прошло успешно;
* 1 - ошибка открытия исходного файла;
* 2 - ошибка создания целевого файла;
* 3 - ошибка выделения памяти для буфера.
* (в случае ошибок необходимо либо повторно вызвать, либо удалить целевой описатель)
*/
int fCopyRange(Table*, Table*, int);

/*
* Получает информацию элемента
* Параметры:
* (Table*) pTable - указатель на описатель таблицы;
* (int*) pId_pAns - указатель на индекс элемента и в то же время - на место, куда записать и инфу.
* Вернет:
* 0 - инфа скопирована;
* 1 - ошибка открытия файла.
*/
int fGetInfo(Table*, int*);

/*
* Получает массив информаций из вссех элементов
* (Table*) pTable - указатель на описатель таблицы;
* (int**) ppInfo - указатель на указатель на число, место, куда записать массив.
* Вернет:
* 0 - инфа получена успешно;
* 1 - ошибка открытия файла;
* 2 - отказ в выделении памяти под массив.
*/
int fGetAllInfo(Table*, int**);