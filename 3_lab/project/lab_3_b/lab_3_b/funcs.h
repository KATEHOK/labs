#pragma once

/*
* Инициализирует и записывает в файл новую таблицу
* Параметры:
* (Container**) ppContainer - указатель на указатель, куда записать контейнер описателя таблицы;
* (char*) pName - имя новой таблицы (массив символов <= 16, последний - '\0')
* (int) maxKeyCount - максимально возможное количество элементов таблицы.
* Вернет:
* 0 - успешно прошли инициализация и запись в файл;
* 1 - отказ в выделении памяти под описатель;
* 2 - отказ в выгрузке таблицы в файл;
* 3 - предыдущее + не удалось удалить созданный описатель (неверно передана структура).
*/
int init(Container**, char*, int);

/*
* Удаляет описатель таблицы и файл с таблицей
* Параметры:
* (Container*) pContainer - указатель на контейнер описателя таблицы.
* Вернет:
* 0 - удаление прошло успешно;
* 1 - передана ошибочная структура.
*/
int delete(Container*);

/*
* Вставляет элемент в таблицу (в описатель и в файл)
* Параметры:
* (Container*) pContainer - указатель на контейнер описателя таблицы;
* (int) key - ключ;
* (int) info - информация.
* Вернет:
* 0 - успешно;
* 1 - передана ошибочная структура;
* 2 - не успешно (дублирование ключей);
* 3 - не успешно (переполнение);
* 4 - не удалось открыть файл;
* 5 - предыдущее + не удалось удалить из описателя таблицы (передана ошибочная структура).
*/
int insertItem(Container*, int, int);

/*
* Удаляет ключ из описателя и из файла
* Параметры:
* (Container*) pContainer - указатель на контейнер описателя таблицы;
* (int) key - значение ключа.
* Вернет:
* 0 - ключ успешно удален;
* 1 - передана ошибочная структура;
* 2 - ключ не найден;
* 3 - не удалось открыть файл, при этом из описателя ключ был удален (имеет место несоответствие)
*/
int deleteItem(Container*, int);

/*
* Ищет и ключи интервала и создает контейнер описателя таблицы и добавляет таблицу в файл
* Параметры:
* (Container*) pSource - указатель на контейнерисходной таблицы;
* (Container**) ppDestination - указатель на указатель куда записать контейнер целевой таблицы;
* (int) minKey - нижняя граница интервала;
* (int) maxKey - верхняя граница интервала;
* (char*) pName - имя новой таблицы (строка-массив символов из 16 эл, последний - '\0').
* Вернет:
* 0 - создание таблицы-интервала прошло успешно;
* 1 - передана ошибочная структура;
* 2 - не удалось инициализировать контейнер описателя таблицы (отказ в выделении памяти);
* 3 - ошибка открытия исходного файла;
* 4 - ошибка создания целевого файла;
* 5 - ошибка выделения памяти для буфера;
* 6 - ошибка 3-6 + ошибка удаления описателя целевой таблицы (несоответствие описателя и файла).
*/
int copyRange(Container*, Container**, int, int, char*);

/*
* Получает информацию элемента
* Параметры:
* (Container*) pContainer - указатель на описатель таблицы;
* (int*) pKey_pId_pInfo - указатель на ключ элемента и в то же время - на место, куда записать и инфу.
* Вернет:
* 0 - инфа скопирована;
* 1 - передана ошибочная структура;
* 2 - ключ не найден;
* 3 - ошибка открытия файла.
*/
int getInfo(Container*, int*);

/*
* Распечатывает элемент
* Параметры:
* (Container*) pContainer - указатель на описатель таблицы;
* (int) key_info - ключ элемента, а после поиска - инфа.
* Вернет:
* 0 - инфа распечатана;
* 1 - передана ошибочная структура;
* 2 - ключ не найден;
* 3 - ошибка открытия файла.
*/
int printItem(Container*, int);

/*
* Распечатывает таблицу или информацию о том, что таблица пуста
* (Container*) pContainer - указатель на описатель таблицы.
* Вернет:
* 0 - таблица распечатана успешно;
* 1 - ошибка открытия файла;
* 2 - отказ в выделении памяти под массив.
*/
int print(Container*);

/*
* Загружает описание таблицы и пространства ключей из файла
* (Container**) - указатель на указатель, куда записать описатель таблицы;
* (char*) pName - имя таблице (оно же и название файла, длина до 15 символов).
* Вернет:
* 0 - таблица загружена успешно;
* 1 - не удалось открыть файл с таким именем;
* 2 - отказ в выделении памяти;
* 3 - файл пуст.
*/
int open(Container**, char*);