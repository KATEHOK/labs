#pragma once

typedef struct {
	char name[16];
	int keysCount;
	int maxKeysCount;
} Table;

typedef struct {
	int key;
	int info;
} FileItem;

typedef struct {
	Table* pTable;
	int* pKey;
} Container;

/*
* Создает пустую таблицу
* Параметры:
* (Container**) ppContainer - указатель на указатель на место, куда записать описатель таблицы;
* (char*) pName - строка-имя таблицы (массив символов <= 16, на конце '\0');
* (int) maxKeysCount - максимально допустимое количество ключей.
* Вернет:
* 0 - успешно;
* 1 - отказ в выделении памяти под описатель.
*/
int tInit(Container**, char*, int);

/*
* Удаляет описатель таблицы и файл
* Параметры:
* (Container*) pContainer - указатель на контейнер описателей.
* Вернет:
* 0 - удаление прошло успешно;
* 1 - передана ошибочная структура.
*/
int tDelete(Container*);

/*
* Ищет ключ
* Параметры:
* (Container*) pContainer - указатель на контейнер описателя таблицы;
* (int*) pKey_pId - указатель на значение ключа, а также куда записать индекс ключа.
* Вернет:
* 0 - ключ найден;
* 1 - передана ошибочная структура;
* 2 - ключ не найден.
*/
int tSearchItem(Container*, int*);

/*
* Вставляет элемент в таблицу
* Параметры:
* (Container*) pContainer - указатель на контейнер описателя таблицы;
* (int) key - ключ;
* (int) info - информация.
* Вернет:
* 0 - успешно;
* -1 - передана ошибочная структура;
* -2 - не успешно (дублирование ключей);
* -3 - не успешно (переполнение).
*/
int tInsertItem(Container*, int, int);

/*
* Удаляет ключ из описателя
* Параметры:
* (Container*) pContainer - указатель на контейнер описателя таблицы;
* (int) key - значение ключа.
* Вернет:
* 0 - ключ успешно удален;
* -1 - передана ошибочная структура;
* -2 - ключ не найден.
*/
int tDeleteItem(Container*, int);

/*
* Ищет и ключи интервала и создает контейнер описателя таблицы
* Параметры:
* (Container*) pSource - указатель на контейнерисходной таблицы;
* (Container**) ppDestination - указатель на указатель куда записать контейнер целевой таблицы;
* (int) minKey - нижняя граница интервала;
* (int) maxKey - верхняя граница интервала;
* (char*) pName - имя новой таблицы (строка-массив символов из 16 эл, последний - '\0').
* Вернет:
* >= 0 - индекс наименьшего ключа из интервала;
* -1 - передана ошибочная структура;
* -2 - не удалось инициализировать контейнер описателя таблицы (отказ в выделении памяти).
*/
int tCopyRange(Container*, Container**, int, int, char*);