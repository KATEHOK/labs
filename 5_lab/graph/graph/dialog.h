#pragma once

/*
* Выводит список действий и запрашивает действие
* Параметры:
* (char*) pQuestion - вопрос к пользователю;
* (char**) ppArray - массив вариантов действий;
* (int) len - длина массива.
* Вернет:
* -1 - конец файла;
* 0 - выход;
* >0 - действие.
*/
int console(char*, char**, int);

/*
* Вызывает инициализацию графа.
* Вернет:
* NULL - отказ в выделении памяти (выводит сообщение);
* (Graph*) - указатель на новый граф (выводит сообщение).
*/
Graph* dInit();

/*
* Запрашивает подтверждение и вызывает удаление графа:
* (Graph*) pGraph - указатель на граф.
* Вернет:
* 0 - удаление прошло успешно (печатает сообщение);
* 1 - ошибка ввода (конец файла);
* 2 - удаление было отменено пользователем (печатает сообщение).
*/
int dDelete(Graph* pGraph);

/*
* Запрашивает ввод имени вершины и добавляет ее в граф:
* (Graph*) pGraph - указатель на граф.
* Вернет:
* 0 - успех или дублирование имен (печатает сообщение);
* 1 - произошла критическая ошибка (удаляет граф).
*/
int dAddPoint(Graph* pGraph);

/*
* Запрашивает имя вершины и удаляет ее из графа:
* (Graph*) pGraph - указатель на граф.
* Вернет:
* 0 - вершина успешно удалена или не найдена (печатает сообщение);
* 1 - критическая ошибка (удаляет граф).
*/
int dDeletePoint(Graph* pGraph);

/*
* Запрашивает ввод имен вершин и веса дуги, добавляет дугу:
* (Graph*) pGraph - указатель на граф.
* Вернет:
* 0 - успех или вершины не найдены (печатает сообщение);
* 1 - произошла критическая ошибка (удаляет граф).
*/
int dAddArrow(Graph* pGraph);

/*
* Запрашивает ввод имен вершин и удаляет дугу:
* (Graph*) pGraph - указатель на граф.
* Вернет:
* 0 - успех или вершины не найдены (печатает сообщение);
* 1 - критическая ошибка (удаляет граф).
*/
int dDeleteArrow(Graph* pGraph);

/*
* Вызывает печать графа:
* (Graph*) pGraph - указатель на граф.
* Вернет:
* 0 - успех или в графе нет вершин (печатает сообщение);
* 1 - критическая ошибка (удаляет граф).
*/
int dPrint(Graph* pGraph);

/*
* Обрабатывает возможные действия с графом:
* (Graph*) pGraph - указатель на дерево.
* Вернет:
* 0 - граф корректно закрыт;
* 1 - критическая ошибка, необходимо экстренно завершить выполнение программы.
*/
int dProcess(Graph* pGraph);

/*
* Запрашивает ввод имен вершин и веса дуги, строит дерево достижимости и печатает его:
* (Graph*) pGraph - указатель на граф.
* Вернет:
* 0 - успех или вершины не найдены (печатает сообщение);
* 1 - произошла критическая ошибка (удаляет граф).
*/
int dSearchWay(Graph* pGraph);

/*
* Запрашивает ввод имен вершин и ищет кратчайший путь между ними:
* (Graph*) pGraph - указатель на граф.
* Вернет:
* 0 - успех или другое корректное завершение (печатает сообщение);
* 1 - произошла критическая ошибка (удаляет граф).
*/
int dShortestWay(Graph* pGraph);

/*
* Вызывает топологическую сортировку графа:
* (Graph*) pGraph - указатель на граф.
* Вернет:
* 0 - успешно или не критическая ошибка (выводит сообщение);
* 1 - критическая ошибка.
*/
int dSortGraph(Graph* pGraph);