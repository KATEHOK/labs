#pragma once

typedef struct Graph {
	Matrix* pMatrix;
} Graph;


// BASE

/*
* Инициализирует граф, представление - матрицей смежности.
* Вернет:
* NULL - отказ в выделении памяти;
* (Graph*) - указатель на новый граф.
*/
Graph* initGraph();

/*
* Удаляет граф:
* (Graph*) pGraph - указатель на граф.
*/
void deleteGraph(Graph* pGraph);

/*
* Добавляет в граф новую вершину:
* (Graph*) pGraph - указатель на граф;
* (char*) pName - имя вершины (статический массив символов).
* Вернет:
* 0 - успешно;
* 1 - отказ в выделении памяти (не критично);
* 2 - дублирование имен (не критично);
* 3 - отказ в выделении памяти (критично);
* 4 - передан NULL.
*/
int addPoint(Graph* pGraph, char pName[8]);

/*
* Удаляет вершину графа:
* (Graph*) pGraph - указатель на граф;
* (char*) pName - имя удаляемой строки (статический массив символов).
* Вернет:
* 0 - успешно;
* 1 - вершина не найдена;
* 2 - отказ при работе с памятью (критично);
* 3 - передан NULL;
*/
int deletePoint(Graph* pGraph, char pName[8]);

/*
* Добавляет дугу (при наличии обновляет вес):
* (Graph*) pGraph - указатель на граф;
* (char*) pSrc - имя исходящей вершины (статический массив символов);
* (char*) pDest - имя входящей вершины (статический массив символов);
* (int) weight - добавляемое значение веса.
* Вернет:
* 0 - успешно;
* 1 - строка(и) не найдена(ы);
* 2 - передан NULL.
*/
int addArrow(Graph* pGraph, char pSrc[8], char pDest[8], int weight);

/*
* Удаляет дугу:
* (Graph*) pGraph - указатель на граф;
* (char*) pSrc - имя исходящей вершины (статический массив символов);
* (char*) pDest - имя входящей вершины (статический массив символов).
*/
void deleteArrow(Graph* pGraph, char pSrc[8], char pDest[8]);

/*
* Печатает матрицу смежности графа:
* (Graph*) pGraph - указатель на граф.
* Вернет:
* 0 - успешно;
* 1 - передано NULL;
* 2 - В графе нет вершин.
*/
int printGraph(Graph* pGraph);

// ENDBASE

/*
* Строит дерево достижимости для заданной вершины:
* (Graph*) pGraph - указатель на граф;
* (char*) pSrc - имя начальной вершины (статический массив символов);
* (char*) pDest - имя конечной вершины (статический массив символов).
* Вернет:
* 0 - успешно;
* 1 - отказ в выделении памяти (граф не пострадал);
* 2 - вершина(ы) не найдена(ы).
*/
int searchWay(Graph* pGraph, char pSrc[8], char pDest[8]);

/*
* заполняет дерево достижимости до заданной вершины:
* (Graph*) pGraph - указатель на граф;
* (Tree*) pTree - указатель на дерево достижимости;
* (int) id - id текущей вершины;
* (char*) pDest - имя конечной вершины (статический массив символов).
*/
void fillReachabilityTree(Graph* pGraph, Tree* pTree, int id, char pDest[8]);

/*
* Алгоритм поиска кратчайшего пути BellmanFord:
* (Graph*) pGraph - указатель на граф;
* (char*) pSrc - имя начальной вершины (статический массив символов);
* (char*) pDest - имя целевой вершины (статический массив символов).
* Вернет:
* 0 - кратчайший путь найден;
* 1 - критическая ошибка;
* 2 - вершина(ы) не найдена(ы);
* 3 - существует отрицательный цикл;
* 4 - целевая вершина не достижима из начальной.
*/
int findShortestWay(Graph* pGraph, char pSrc[8], char pDest[8]);

/*
* Рекурсивно печатает кратчайший путь:
* (Graph*) pGraph - указатель на граф;
* (int) srcId - индекс начальной вершины;
* (int) destId - индекс целевой вершины;
* (int) curId - индекс текущей вершины.
*/
void printShortestWay(Graph* pGraph, int srcId, int destId, int curId);

/*
* Топологическая сортировка:
* (Graph*) pGraph - указатель на граф.
* Вернет:
* 0 - успех;
* 1 - критическая ошибка;
* 2 - не критическая ошибка;
* 3 - граф не ацикличен.
*/
int sortGraph(Graph* pGraph);

/*
* Определяет наличие цикла:
* (Graph*) pGraph - указатель на граф.
* Вернет:
* 0 - граф ациклический;
* 1 - критическая ошибка;
* 3 - существует цикл.
*/
int checkCycle(Graph* pGraph);

/**/
int fillTree(Tree* pTree, int idParent);